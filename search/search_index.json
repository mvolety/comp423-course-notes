{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Mya Volety's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting Up a DevContainer for Rust","text":"<p>Welcome! In this tutorial, you'll learn how to set up a Rust development environment using Dev Containers in Visual Studio Code. By the end of this guide, you'll have a working Rust project that prints \"Hello COMP423\" to the console.</p>"},{"location":"tutorials/rust-setup/#why-dev-containers-for-rust","title":"Why Dev Containers for Rust?","text":"<p>Setting up consistent development environments can be challenging. Dev Containers, powered by Docker, make this easy by creating a pre-configured environment for your project. For Rust, this means you'll have the language tools (<code>rustc</code>, <code>cargo</code>) and helpful extensions (<code>rust-analyzer</code>) ready to go.</p> <p>Using a Dev Container ensures your code runs the same way on any machine, making it easier to collaborate, debug, and onboard new team members.</p>"},{"location":"tutorials/rust-setup/#why-this-matters","title":"Why This Matters","text":"<p>Rust is a modern, high-performance systems programming language known for its safety and speed. It powers some of the most critical systems, including web browsers, operating systems, and distributed databases. Learning to set up a project using Rust's tools and a Dev Container not only teaches you valuable skills but also sets you up to work efficiently in professional environments.</p>"},{"location":"tutorials/rust-setup/#what-you-will-learn","title":"What You Will Learn","text":"<p>By completing this tutorial, you will:</p> <ul> <li>Set up a Rust development container in VS Code.</li> <li>Configure the <code>rust-analyzer</code> extension for enhanced coding features.</li> <li>Create a basic Rust project using <code>cargo</code>.</li> <li>Write, build, and run a \"Hello COMP423\" program in Rust.</li> <li>Understand Rust's build and run workflow using <code>cargo</code>.</li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before diving in, ensure you have the following:</p> <ul> <li>A GitHub Account: If you don't have one yet, sign up at GitHub</li> <li>Git Installed: Install Git if you don't already have it</li> <li>Visual Studio Code (VS Code): Download VS Code.</li> <li>Dev Containers Extension: Install the Dev Containers extension.</li> <li>Docker Desktop: Install Docker.</li> </ul>"},{"location":"tutorials/rust-setup/#part-1-setting-up-the-project","title":"Part 1: Setting Up the Project","text":""},{"location":"tutorials/rust-setup/#step-1-create-a-local-directory-and-initialize-git","title":"Step 1: Create a Local Directory and Initialize Git","text":"<ol> <li>Open your terminal and navigate to where you'd like to create the project.</li> <li>Create a new directory for your project and initialize a Git repository:<ul> <li><code>mkdir rust-dev-container</code></li> <li><code>cd rust-dev-container</code> </li> <li><code>git init</code></li> </ul> </li> <li>Add a README file:<ul> <li><code>echo \"# Rust Dev Container Project\" &gt; README.md</code></li> <li><code>git add README.md</code></li> <li><code>git commit -m \"Initial commit with README\"</code></li> </ul> </li> </ol>"},{"location":"tutorials/rust-setup/#step-2-create-a-remote-repository-on-github","title":"Step 2: Create a Remote Repository on GitHub","text":"<ol> <li> <p>Log in to your GitHub account and navigate to the Create a New Repository page.</p> </li> <li> <p>Fill in the details as follows:</p> </li> <li>Repository Name: <code>rust-tutorial</code></li> <li>Description: \"Hello World program in Rust\"</li> <li> <p>Visibility: Public</p> </li> <li> <p>Do not initialize the repository with a <code>README</code>, <code>.gitignore</code>, or license.</p> </li> <li> <p>Click Create Repository.</p> </li> </ol>"},{"location":"tutorials/rust-setup/#step-3-link-your-local-repository-to-github","title":"Step 3. Link your Local Repository to GitHub","text":"<ol> <li>Add the GitHub repository as a remote:<pre><code>git remote add origin https://github.com/&lt;your-username&gt;/rust-tutorial.git\n</code></pre> </li> </ol> <p>Replace <code>&lt;your-username&gt;</code> with your GitHub username.</p> <ol> <li>Check your default branch name with the subcommand:<pre><code>git branch\n</code></pre> </li> </ol> <p>If it's not <code>main</code>, rename it to <code>main</code> with the following command:</p> <pre><code>    git branch -M main\n</code></pre> <p>Old versions of Git use <code>master</code> for the primary branch, but <code>main</code> is now the standard.</p> <ol> <li>Push your local commits to the GitHub repository:<pre><code>git push --set-upstream origin main\n</code></pre> </li> </ol>"},{"location":"tutorials/rust-setup/#understanding-the-set-upstream-flag","title":"Understanding the <code>--set-upstream</code> Flag","text":"<ul> <li>The command <code>git push --set-upstream origin main</code> pushes the <code>main</code> branch to the remote repository <code>origin</code>.</li> <li>The <code>--set-upstream</code> flag sets the <code>main</code> branch to track the remote branch. This allows future pushes and pulls to be done without specifying the branch name. You can simply use:<pre><code>git push origin\n</code></pre> </li> </ul> <p>when working on your local <code>main</code> branch. - The long flag <code>--set-upstream</code> has a corresponding short flag <code>-u</code>.</p> <ol> <li>Back in your web browser, refresh your GitHub repository to confirm that the same commit you made locally has been pushed to the remote repository.  </li> <li>Use <code>git log</code> locally to see the commit ID and message, which should match the most recent commit on GitHub.</li> <li>This confirms your changes have been successfully pushed to the remote repository.</li> </ol>"},{"location":"tutorials/rust-setup/#part-2-setting-up-the-development-environment","title":"Part 2: Setting Up the Development Environment","text":""},{"location":"tutorials/rust-setup/#step-1-create-the-dev-container-configuration","title":"Step 1: Create the Dev Container Configuration","text":"<ol> <li>Create a <code>.devcontainer</code> folder in the project directory: <ul> <li><code>mkdir .devcontainer</code>.</li> </ul> </li> <li>Inside <code>.devcontainer</code>, create a <code>devcontainer.json</code> file with the following content:<pre><code>    {\n        \"name\": \"Rust Dev Container\",\n         \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n         \"customizations\": {\n             \"vscode\": {\n                \"extensions\": [\"rust-lang.rust-analyzer\"]\n            }\n        }\n    }\n</code></pre> </li> </ol>"},{"location":"tutorials/rust-setup/#explanation-of-the-configuration","title":"Explanation of the Configuration","text":"<ul> <li><code>\"image\"</code>: Specifies the Rust base image provided by Microsoft.</li> <li><code>\"customizations.vscode.extensions\"</code>: Ensures the rust-analyzer extension is installed in VS Code.</li> </ul>"},{"location":"tutorials/rust-setup/#step-2-open-the-project-in-a-dev-container","title":"Step 2: Open the Project in a Dev Container","text":"<ol> <li>Open the project in VS Code.</li> <li>Press Ctrl+Shift+P (or Cmd+Shift+P on Mac), type \"Dev Containers: Reopen in Container,\" and select it.</li> <li>VS Code will build and open the container. This may take a few minutes during the initial setup.</li> <li>Once the container is ready, verify Rust is installed by running the command <code>rustc --version</code>.</li> </ol>"},{"location":"tutorials/rust-setup/#part-3-creating-a-rust-project","title":"Part 3: Creating a Rust Project","text":""},{"location":"tutorials/rust-setup/#step-1-use-cargo-to-create-a-new-project","title":"Step 1: Use cargo to Create a New Project","text":"<ol> <li> <p>Inside the container, use cargo to create a new binary project.</p> </li> <li> <p>Create a new project: <code>cargo new hello_comp423 --vcs none</code></p> </li> <li>Navigate into the project directory: <code>cd hello_comp423</code></li> </ol>"},{"location":"tutorials/rust-setup/#what-does-vcs-none-mean","title":"What does <code>--vcs none</code> mean?","text":"<p>It prevents cargo from automatically creating a Git repository, as you\u2019ve already initialized one manually.</p>"},{"location":"tutorials/rust-setup/#step-2-write-your-hello-comp423-program","title":"Step 2: Write Your \"Hello COMP423\" Program","text":"<ol> <li>Open the <code>src/main.rs</code> file in VS Code.</li> <li> <p>Replace its content with the following code:</p> <pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre> </li> <li> <p>Save the file.</p> </li> </ol>"},{"location":"tutorials/rust-setup/#step-3-build-and-run-your-program","title":"Step 3: Build and Run Your Program","text":"<ol> <li>Compile the program using cargo build: <code>cargo build</code>.    The compiled binary is stored in the <code>target/debug</code> directory.</li> </ol>"},{"location":"tutorials/rust-setup/#how-does-this-compare-to-comp211","title":"How does this compare to COMP211?","text":"<p>This is similar to using gcc to compile C programs in COMP211.</p> <ol> <li> <p>Run the binary directly: <code>./target/debug/hello_comp423</code>.</p> </li> <li> <p>Alternatively, use cargo run to build and execute in one step: <code>cargo run</code>.</p> </li> </ol>"},{"location":"tutorials/rust-setup/#difference-between-build-and-run","title":"Difference Between <code>build</code> and <code>run</code>","text":"<ul> <li>cargo build: Compiles the code without running it.</li> <li>cargo run: Combines compilation and execution, making it faster for testing changes.</li> </ul>"},{"location":"tutorials/rust-setup/#part-4-push-changes-to-github","title":"Part 4: Push Changes to GitHub","text":"<p>Now that your configuration is ready, let\u2019s test it out:</p> <ol> <li> <p>Add and commit your changes:</p> <pre><code>git add .\ngit commit -m \"Finished Rust tutorial\"\n</code></pre> </li> <li> <p>Push the changes to GitHub:</p> <pre><code>git push origin main\n</code></pre> </li> </ol>"},{"location":"tutorials/rust-setup/#part-5-why-this-matters","title":"Part 5: Why This Matters","text":"<p>By setting up a Dev Container and working with Rust, you\u2019ve learned critical skills for modern software development:</p> <ul> <li>Consistency: Ensures that all developers work in identical environments.</li> <li>Efficiency: Automates environment setup, saving time.</li> <li>Industry Standards: Rust is widely used for high-performance and safe systems programming.</li> </ul> <p>Congratulations! You've successfully created and configured a Rust Dev Container project. \ud83c\udf89</p> <ul> <li> <p>Primary author: Mya Volety</p> </li> <li> <p>Reviewer: Rachel Alvis</p> </li> </ul>"}]}